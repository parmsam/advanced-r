---
title: "09-functionals"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

# General

## Functional languages

-   Functional languages have first class functions. They behave like any other data structure.
-   Many functional languages require function to be pure. A pure function means the output only depends on inputs and has no-side effects.
    -   R isn't a pure functional programming language.
-   There are functionals, function factories, and function operators. They're summarized in the following table.

![](images/fp.png){width="501"}

## Functional

-   A functional takes a function as an input and returns a vector as an output.

-   They're useful a for-loop replacement such as `lapply()`, or `purrr::map()`.

```{r}
randomise <- function(f) f(runif(1e3))
randomise(mean)

triple <- function(x) x * 3
map(1:3, triple)
```

# Concepts

# Useful functions

```{r}

```

# Exercises
