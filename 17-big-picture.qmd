---
title: "02-names-values"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

# General

## Metaprogramming

-   The idea behind **metaprogramming** is that code can be inspected and programmatically modified.
-   Tidy evaluation (aka **tidyeval**) is implemented via the rlang package.

## Code is data

-   You can capture code and compute on it just like any other type of data.
-   `rlang::expr()` can help you capture code. It returns exactly what you put into it.
    -   The captured code is an expression which is a collective term for a call, symbol, constant or pairlist.
-   `rlang::enexpr()` helps capture this from within a function b/c `expr()` won't work. In the example below, `capture_it()` automatically quotes its first argument.

```{r}
library(rlang)
capture_it <- function(x) {
  expr(x)
}
capture_it(a + b + c)
#> x
capture_it <- function(x) {
  enexpr(x)
}
capture_it(a + b + c)
#> a + b + c
```

## Code as a tree

-   Almost every programming languages uses code as a tree. This is often called the **abstract syntrax tree** (aka AST). R is nice b/c you can view and edit this tree.
-   Use `lobstr::ast()` to see this tree-like structure.
-   Every R expression can be viewed this way

```{r}
library(lobstr)
lobstr::ast(f(a, "b"))
lobstr::ast(f1(f2(a, b), f3(1, f4(2))))
lobstr::ast(1 + 2 * 3)
```

## Code to generate code

-   `rlang::call2()` constructs a function call from the function to call and argument to call it with.

```{r}
call2("f", 1,2,3)
call2("+", 1, call2("*", 2, 3))
```

### Unquoting

-   An alternative is building complex code trees by combining simple code trees with a template. `expr()` and `enexpr()` have support for this via `!!` (aka bang-bang) which is the **unquote operator**.
    -   Use of `!!` inserts the code tree into the expression in the example below.

```{r}
# using the unquote operator
xx <- expr(x + x)
yy <- expr(y + y)

expr(!!xx / !!yy)
#> (x + x)/(y + y)
```

-   Unquoting is very useful when used in a function definition. First you use `enexpr()` since it's inside a function. Then you use `!!` with `expr()`.
-   Since it even deals with wierd variables names, that's another reason to use this approach instead of `paste()` driven approach since that opens you up to injection attacks.

```{r}
cv <- function(var) {
  var <- enexpr(var)
  expr(sd(!!var) / mean(!!var))
}

cv(x)
cv(x + y)
```

## Evaluating expressions

-   You can evaluation an expression using `base::eval()`. However, this requires an environment where you tell R what the symbols in the expression mean.
-   As expected, the main function takes an expression and an environment.

```{r}
eval(expr(x + y), env(x = 1, y = 10))
eval(expr(x + y), env(x = 2, y = 100))
# if env argument is omitted then it uses the current environment
x <- 10
y <- 100
eval(expr(x + y))
#> [1] 110
```

-   You can also also bind names to functions, allowing you to override the behavior of existing functions.
    -   dplyr uses this to generate SQL code for execution in a remote database.

```{r}
string_math <- function(x) {
  e <- env(
    caller_env(),
    `+` = function(x, y) paste0(x, y),
    `*` = function(x, y) strrep(x, y)
  )

  eval(enexpr(x), e)
}

name <- "Hadley"
string_math("Hello " + name)
#> [1] "Hello Hadley"
string_math(("x" * 2 + "-y") * 3)
#> [1] "xx-yxx-yxx-y"
```

## Evaluation with data

-   `eval_tidy()` also takes a data mask, which is typically a data frame

```{r}
df <- data.frame(x = 1:5, y = sample(5))
eval_tidy(expr(x + y), df)
#> [1] 6 6 4 6 8
with2 <- function(df, expr) {
  eval_tidy(enexpr(expr), df)
}

with2(df, x + y)
#> [1] 6 6 4 6 8
```

## Quosures

-   A problem arises when we need to evaluate a captured epression in the environment where it was written.
-   That's where quosures come into play. **Quosures** bundle an expression with and environment. `eval_tidy()` can work with quosures.
-   Whenever using a data mask, always use `enquo()` instead of `enexpr()`.

```{r}
with2 <- function(df, expr) {
  a <- 1000
  eval_tidy(enexpr(expr), df)
}
df <- data.frame(x = 1:3)
a <- 10
with2(df, x + a)
#> [1] 1001 1002 1003

with2 <- function(df, expr) {
  a <- 1000
  eval_tidy(enquo(expr), df)
}

with2(df, x + a)
#> [1] 11 12 13
```

# Concepts

# Useful functions

```{r}

```

# Exercises
